{"version":3,"sources":["logo.svg","hooks/useDropdownClose.js","hooks/useSearch.js","components/Input.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","useDropdownClose","ref","callback","useEffect","document","addEventListener","handleClick","removeEventListener","e","current","contains","target","useSearch","_useState","useState","_useState2","Object","slicedToArray","searchString","setSearchString","console","log","mockData","data","filter","d","id","toLowerCase","search","name","address","items","includes","Input","isActive","setIsActive","dropdownRef","useRef","_useSearch","_useSearch$data","highlighter","item","searchStrig","react_default","a","createElement","className","dangerouslySetInnerHTML","__html","replace","RegExp","match","concat","onClick","type","required","placeholder","value","onChange","length","map","i","key","String","App","components_Input","Boolean","window","location","hostname","ReactDOM","render","src_App","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.35707a6d.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import { useEffect } from \"react\";\n\nconst useDropdownClose = (ref, callback) => {\n  useEffect(() => {\n    // add when mounted\n    document.addEventListener(\"mousedown\", handleClick);\n    // return function to be called when unmounted\n    return () => {\n      document.removeEventListener(\"mousedown\", handleClick);\n    };\n  }, []);\n\n  const handleClick = e => {\n    if (ref && ref.current && ref.current.contains(e.target)) {\n      return 0;\n    }\n    callback(false);\n    return 0;\n  };\n};\n\nexport default useDropdownClose;\n","import { useState } from \"react\";\nimport mockData from \"../mockData.json\";\n\nconst useSearch = () => {\n  const [searchString, setSearchString] = useState(\"\");\n  console.log(mockData);\n  return {\n    data: mockData.filter(\n      d =>\n        d.id.toLowerCase().search(searchString.toLowerCase()) !== -1 ||\n        d.name.toLowerCase().search(searchString.toLowerCase()) !== -1 ||\n        d.address.toLowerCase().search(searchString.toLowerCase()) !== -1 ||\n        d.items.includes(searchString)\n    ),\n    searchString,\n    setSearchString\n  };\n};\n\nexport default useSearch;\n","import React, { useState, useRef } from \"react\";\nimport useDropdownClose from \"../hooks/useDropdownClose\";\nimport useSearch from \"../hooks/useSearch\";\n\nconst Input = () => {\n  const [isActive, setIsActive] = useState(false);\n  const dropdownRef = useRef();\n\n  useDropdownClose(isActive, setIsActive);\n\n  const { data = [], searchString, setSearchString } = useSearch();\n\n  const highlighter = (item, searchStrig) => (\n    <span\n      className=\"non-match\"\n      dangerouslySetInnerHTML={{\n        __html: item.replace(\n          new RegExp(searchString ? searchString : \" \", \"gi\"),\n          match => `<span class=\"match\">${match}</span>`\n        )\n      }}\n    />\n  );\n\n  console.log(data);\n  return (\n    <div className=\"search-wrapper\" onClick={() => setIsActive(!isActive)}>\n      <div>\n        <input\n          type=\"text\"\n          name=\"focus\"\n          required\n          className=\"search-box\"\n          placeholder=\"Search by ID, Address, Name....\"\n          value={searchString}\n          onChange={e => setSearchString(e.target.value)}\n        />\n        <button className=\"close-icon\" onClick={() => setSearchString(\"\")} />\n      </div>\n      {isActive && (\n        <div className=\"dropdown\" ref={dropdownRef}>\n          {data.length > 0 ? (\n            data.map((d, i) => (\n              <div key={`data.id_${String(i)}`} className=\"dropdown-item\">\n                <div className=\"id\">{highlighter(d.id, searchString)}</div>\n                {d.items.includes(searchString) && (\n                  <div className=\"item\">\n                    <div />\"{searchString}\" found in Items.\n                  </div>\n                )}\n                <div className=\"name\">\n                  <span className=\"non-match\">\n                    {highlighter(d.name, searchString)}\n                  </span>\n                </div>\n                <div className=\"address\">\n                  <span className=\"non-match\">\n                    {highlighter(d.address, searchString)}\n                  </span>\n                </div>\n              </div>\n            ))\n          ) : (\n            <div className=\"dropdown-item\">No Results Found</div>\n          )}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default Input;\n","import React from \"react\";\nimport logo from \"./logo.svg\";\nimport \"./App.css\";\nimport Input from \"./components/Input\";\n\nfunction App() {\n  return <Input />;\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}